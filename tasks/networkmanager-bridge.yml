---

# - name: Network_BRIDGE | retrieve current machine ip
#  ansible.builtin.setup:
#    gather_subset:
#      - network
#  register: host_facts


# - name: Network_BRIDGE | debug preferred_nic
#  ansible.builtin.debug:
#    msg: "{{ preferred_nic | default(omit) }}"
#    verbosity: 3

# - name: Network_BRIDGE | compute ip if preferred_nic is not set
#  ansible.builtin.debug:
#    msg: "{{ host_facts.ansible_facts['ansible_' + preferred_nic].ipv4.address if preferred_nic is defined else host_facts.ansible_facts.ansible_default_ipv4.address | default(host_facts.ansible_facts.ansible_all_ipv4_addresses | first) }}"
#  register: current_host_ip

# - name: Network_BRIDGE | compute ip range to set for bridge
#  ansible.builtin.debug:
#    msg: "{{ current_host_ip.msg | ansible.utils.ipaddr | ansible.netcommon.ipmath(+20) | ansible.utils.ipsubnet(28) }}" # TODO: make this configurable, use + instead minus
#  register: vm_range

# - name: Network_BRIDGE | debug vm ip range
#  ansible.builtin.debug:
#    msg: "{{ vm_range.msg | default(omit) }}"
#    verbosity: 1

# - name: Network_BRIDGE | compute ip range to set for bridge
#  ansible.builtin.debug:
#    msg: "{{ gw_host if gw_host is defined else (current_host_ip.msg | ansible.utils.ipaddr | ansible.utils.ipsubnet(24) | ansible.utils.nthhost(1)) }}"
#  register: gw_addr

- name: Network_BRIDGE | debug GW ip address
  ansible.builtin.debug:
    msg: "{{ gw_addr.msg | default(omit) }}"

- name: NetworkManager_BRIDGE | Create master bridge
  community.general.nmcli:
    type: bridge
    conn_name: "bridge-{{ nic.source.dev }}"
    # gw4: "{{ gw_addr.msg }}"
    # ip4:
    # - "{{ vm_range.msg }}"
    # - "{{ current_host_ip.msg }}"
    method4: "auto"
    # method4: "manual"
    method6: disabled
    state: present
    # autoconnect: true
  become: true

- name: NetworkManager_BRIDGE | Create bridge-slave
  community.general.nmcli:
    type: ethernet
    ifname: "{{ nic.source.dev }}"
    master: "bridge-{{ nic.source.dev }}"
    conn_name: "port-{{ nic.source.dev }}"
    slave_type: bridge
    state: present
  become: true

- name: Network_BRIDGE | activate forwarding between eth and bridge
  ansible.builtin.command: firewall-cmd --permanent --direct --passthrough ipv4 -I FORWARD -i bridge-{{ nic.source.dev }} -j ACCEPT
  register: _result
  changed_when: "'success' in _result.stdout"
  become: true

- name: Network_BRIDGE | activate reverse forwarding between eth and bridge
  ansible.builtin.command: firewall-cmd --permanent --direct --passthrough ipv4 -I FORWARD -o bridge-{{ nic.source.dev }} -j ACCEPT
  register: _result
  changed_when: "'success' in _result.stdout"
  become: true

- name: Network_BRIDGE | reload firewalld
  ansible.builtin.command: firewall-cmd --reload
  register: _result
  changed_when: "'success' in _result.stdout"
  become: true

- name: NetworkManager_BRIDGE | Update eth
  ansible.builtin.command: "nmcli connection up {{ nic.source.dev }}"
  changed_when: false
  become: true

- name: NetworkManager_BRIDGE | Configure slave autoconnect
  ansible.builtin.command: "nmcli connection modify bridge-{{ nic.source.dev }} connection.autoconnect-slaves 1"
  changed_when: false
  become: true

- name: NetworkManager_BRIDGE | Start bridge
  ansible.builtin.command: "nmcli connection up bridge-{{ nic.source.dev }}"
  changed_when: false
  become: true

- name: NetworkManager_BRIDGE | Set priority for port
  ansible.builtin.command: "nmcli connection modify port-{{ nic.source.dev }} connection.autoconnect-priority -1"
  changed_when: false
  become: true

- name: NetworkManager_BRIDGE | Set priority for bridge
  ansible.builtin.command: "nmcli connection modify bridge-{{ nic.source.dev }} connection.autoconnect-priority -1"
  changed_when: false
  become: true

- name: NetworkManager_BRIDGE | configure firewalld to accept bridge
  ansible.builtin.include_role:
    name: tcharl.ansible_routing
  vars:
    firewalld_zones:
      - name: "{{ ansible_virtualization_guest_network_host_zone }}"
        nics:
          - "port-{{ nic.source.dev }}"
          - "bridge-{{ nic.source.dev }}"
        masquerade: true
