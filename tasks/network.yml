---

- name: ansible-virtualization-guest | network | retreive the vm bridge
  vars:
    query: "[?name == '{{ virtualmachine.interfaces.0.network }}'].bridge"
  ansible.builtin.debug:
    msg: "{{ libvirt_host_networks | json_query(query) }}"
  register: bridgename

- name: ansible-virtualization-guest | network | extract current vm xml
  community.general.xml:
    xmlstring: "{{ vmxml.get_xml }}"
    xpath: "/domain/devices/interface[@type='network']/mac"  # /mac/@address
    content: attribute
  register: vmmacaddress

- name: ansible-virtualization-guest | network | Debug vm mac address
  ansible.builtin.debug:
    var: vmmacaddress
    verbosity: 2

- name: ansible-virtualization-guest | network | wait for leases to be available
  community.libvirt.virt_net:
    command: info
    name: "{{ nic.network }}"
  retries: 70 # travis need a loooooooong setup
  delay: 10
  until: fullnetinfo.networks.default.dhcp_leases | selectattr('mac', 'equalto', vmmacaddress.matches.0.mac.address) | length > 0
  register: fullnetinfo

- name: ansible-virtualization-guest | network | Debug fullnetinfo
  ansible.builtin.debug:
    var: fullnetinfo

- name: ansible-virtualization-guest | network | extract current mac netinfo
  vars:
    query: "[?mac == '{{ vmmacaddress.matches.0.mac.address }}']"
  ansible.builtin.debug:
    msg: "{{ fullnetinfo.networks.default.dhcp_leases | json_query(query) | default(fullnetinfo.networks.default.dhcp_leases.0.mac.address) }}"
  register: currentvmnetinfo

- name: ansible-virtualization-guest | network | Debug currentvmnetinfo
  ansible.builtin.debug:
    var: currentvmnetinfo
    verbosity: 1

- name: ansible-virtualization-guest | network | get current network xml
  community.libvirt.virt_net:
    command: get_xml
    name: "{{ virtualmachine.interfaces.0.network }}"
  register: network_xml
  become: True

- name: ansible-virtualization-guest | network | extract current network xml
  community.general.xml:
    xmlstring: "{{ network_xml.get_xml }}"
    xpath: "/network/ip/dhcp/host[@name='{{ virtualmachine.name }}']"  # /mac/@address
    content: attribute
  failed_when: false
  register: already_registered_hosts

- name: ansible-virtualization-guest | network | debug current network xml
  ansible.builtin.debug:
    var: already_registered_hosts

- name: ansible-virtualization-guest | network | remove dhcp host configuration
  ansible.builtin.command: "virsh net-update default delete ip-dhcp-host \"<host mac='{{ already_registered_hosts.matches.0.host.mac }}' id='{{ already_registered_hosts.matches.0.host.id }}' name='{{ already_registered_hosts.matches.0.host.name }}' ip='{{ already_registered_hosts.matches.0.host.ip }}'/>\""
  changed_when: false
  failed_when: false
  when:
    - not already_registered_hosts is failed
    - already_registered_hosts.count is defined
    - already_registered_hosts.count > 0
  become: true

- name: ansible-virtualization-guest | network | configure permanent ip
  community.libvirt.virt_net:
    name: "{{ nic.network }}"
    command: modify
    xml: "<host mac='{{ hostcheck.mac }}' id='{{ hostcheck.clientid }}' name='{{ virtualmachine.name }}' ip='{{ hostcheck.ipaddr }}'/>"
  become: true
  loop: "{{ currentvmnetinfo.msg }}" # default here should be the referenced interface
  loop_control:
    loop_var: hostcheck
  when:
   - not currentvmnetinfo.failed

- name: ansible-virtualization-guest | network | set ssh redirection
  ansible.builtin.include_role:
    name: tcharl.ansible_routing
  vars:
    firewalld_zones:
      - name: "{{ ansible_virtualization_guest_network_host_zone }}"
        masquerade: true
        nics: "{{ bridgename.msg | default(ansible_virtualization_guest_network_default_nic) }}"
        port_forward_rules:
          - port_forward_rule: "ssh-to-guest-{{ virtualmachine.name }}-tcp"
            family: "{{ ansible_virtualization_guest_network_host_ipversion }}"
            from_port: "{{ virtualmachine.ssh_port_on_host | default(2222) }}"
            protocol: tcp
            to_address: "{{ hostcheck.ipaddr }}"
            to_port: 22
        enabled_services:
          - service: "{{ ansible_virtualization_guest_service_name }}"
          - service: "{{ ansible_virtualization_guest_service_name_tls }}"
  loop: "{{ currentvmnetinfo.msg }}" # default here should be the referenced interface
  loop_control:
    loop_var: hostcheck

- name: ansible-virtualization-guest | network | start vm
  community.libvirt.virt:
    name: "{{ virtualmachine.name }}"
    state: running
  become: Yes

- name: ansible-virtualization-guest | network | trigger ssh role
  ansible.builtin.include_tasks: guest-ssh.yml

- name: ansible-virtualization-guest | network | trigger ansible hosts role
  ansible.builtin.include_tasks: ansible-hosts.yml

- name: ansible-virtualization-guest | network | reboot firewalld # bug in firewalld
  ansible.builtin.service:
    name: firewalld
    state: restarted
  failed_when: false
  changed_when: false
  become: true

- name: ansible-virtualization-guest | network | reboot libvirtd # bug in firewalld
  ansible.builtin.service:
    name: libvirtd
    state: restarted
  changed_when: false
  become: true
