---
- name: Network | delete previous network address for VM
  ansible.builtin.include_tasks: delete-vm-network-host.yml

- name: Network | extract current vm xml
  community.general.xml:
    xmlstring: "{{ vmxml.get_xml }}"
    xpath: "/domain/devices/interface[@type='network']/mac"  # /mac/@address
    content: attribute
  register: vmmacaddress

- name: Network | Debug vm mac address
  ansible.builtin.debug:
    var: vmmacaddress
    verbosity: 2

- name: Network | wait for leases to be available
  community.libvirt.virt_net:
    command: info
    name: "{{ nic.network }}"
  retries: 70 # travis need a loooooooong setup
  delay: 10
  until: fullnetinfo.networks.default.dhcp_leases | selectattr('mac', 'equalto', vmmacaddress.matches.0.mac.address) | length > 0
  register: fullnetinfo

- name: Network | Debug fullnetinfo
  ansible.builtin.debug:
    var: fullnetinfo
    verbosity: 1

- name: Network | extract current mac netinfo
  vars:
    query: "[?mac == '{{ vmmacaddress.matches.0.mac.address }}']"
  ansible.builtin.debug:
    msg: "{{ fullnetinfo.networks.default.dhcp_leases | json_query(query) | default(fullnetinfo.networks.default.dhcp_leases.0.mac.address) }}"
  register: currentvmnetinfo

- name: Network | Debug currentvmnetinfo
  ansible.builtin.debug:
    var: currentvmnetinfo
    verbosity: 1

- name: Network | configure permanent ip
  community.libvirt.virt_net:
    name: "{{ nic.network }}"
    command: modify
    xml: "<host mac='{{ hostcheck.mac }}' name='{{ virtualmachine.name }}' ip='{{ hostcheck.ipaddr }}'/>"
  become: true
  loop: "{{ currentvmnetinfo.msg }}" # default here should be the referenced interface
  loop_control:
    loop_var: hostcheck
  when:
   - not currentvmnetinfo.failed

- name: Network | start vm
  community.libvirt.virt:
    name: "{{ virtualmachine.name }}"
    state: running
  become: Yes

- name: Network | trigger ssh role
  ansible.builtin.include_tasks: guest-ssh.yml

- name: Network | trigger ansible hosts role
  ansible.builtin.include_tasks: ansible-hosts.yml

- name: Network | reboot firewalld # bug in firewalld
  ansible.builtin.service:
    name: firewalld
    state: restarted
  failed_when: false
  become: true

- name: Network | reference new VM in host hosts file
  ansible.builtin.include_role:
    name: tcharl.etchost_append
  vars:
    - name: "{{ virtualmachine.name }}"
      ip: "{{ hostcheck.ipaddr }}"
  loop: "{{ currentvmnetinfo.msg }}" # default here should be the referenced interface
  loop_control:
    loop_var: hostcheck
  when:
    - not currentvmnetinfo.failed
#- name: Network | reboot libvirtd # bug in firewalld
#  ansible.builtin.service:
#    name: libvirtd
#    state: restarted
#  changed_when: false
#  become: true
