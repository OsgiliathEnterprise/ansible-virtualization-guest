---

- name: ansible-virtualization-guest | network | wait for leases to be available
  virt_net:
    command: info
    name: "{{ nic.network }}"
  register: fullnetinfo
  retries: 70 # travis need a loooooooong setup
  delay: 10
  until: fullnetinfo.networks.default.dhcp_leases | length > 0

- name: ansible-virtualization-guest | network | Debug fullnetinfo
  debug:
    var: fullnetinfo
    verbosity: 1

- name: ansible-virtualization-guest | network | extract current vm xml
  xml:
    xmlstring: "{{ vmxml.get_xml }}"
    xpath: "/domain/devices/interface[@type='network']/mac"  # /mac/@address
    attribute: address
    content: attribute
  register: vmmacaddress

- name: ansible-virtualization-guest | network | Debug vm mac address
  debug:
    var: vmmacaddress
    verbosity: 2

- name: ansible-virtualization-guest | network | extract current mac netinfo
  vars:
    query: "[?mac == '{{ vmmacaddress.matches.0.mac.address }}' ]"
  debug:
    msg: "{{ fullnetinfo.networks.default.dhcp_leases | json_query(query) }}"
  register: currentvmnetinfo

- name: ansible-virtualization-guest | network | Debug currentvmnetinfo
  debug:
    var: currentvmnetinfo
    verbosity: 1

- name: ansible-virtualization-guest | network | reboot libvirtd # bug in firewalld
  service:
    name: libvirtd
    state: restarted
  changed_when: false
  become: true

- name: ansible-virtualization-guest | network | reboot firewalld # bug in firewalld
  service:
    name: firewalld
    state: restarted
  failed_when: false
  changed_when: false
  become: true

- name: ansible-virtualization-guest | network | configure permanent ip
  virt_net:
    name: "{{ nic.network }}"
    command: modify
    xml: "<host mac='{{ hostcheck.mac }}' id='{{ hostcheck.clientid }}' name='{{ vm.name }}' ip='{{ hostcheck.ipaddr }}'/>"
  become: true
  loop: "{{ currentvmnetinfo.msg }}" # default here should be the referenced interface
  loop_control:
    loop_var: hostcheck
  when: not currentvmnetinfo.failed

- name: ansible-virtualization-guest | network | set ssh redirection
  include_role:
    name: tcharl.ansible_routing
  vars:
    firewalld_zones:
      - name: "{{ ansible_virtualization_guest_network_host_zone }}"
        masquerade: true
        port_forward_rules:
          - port_forward_rule: "ssh-to-guest-{{ vm.name }}"
            family: "{{ ansible_virtualization_guest_network_host_ipversion }}"
            from_port: "{{ vm.ssh_port_on_host | default(2222) }}"
            protocol: tcp
            to_address: "{{ hostcheck.ipaddr }}"
            to_port: 22
        enabled_services:
          - service: "{{ ansible_virtualization_guest_service_name }}"
          - service: "{{ ansible_virtualization_guest_service_name_tls }}"
  loop: "{{ currentvmnetinfo.msg }}" # default here should be the referenced interface
  loop_control:
    loop_var: hostcheck

- name: ansible-virtualization-guest | network | trigger ssh role
  include_tasks: guest-ssh.yml
  when: not vm.name in ansible_virtualization_guest_configuredvms

- name: ansible-virtualization-guest | network | trigger ansible hosts role
  include_tasks: ansible-hosts.yml
